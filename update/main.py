#!/usr/bin/env python3

"""
QAOA Simulation

For MAXCUT optimization on simulated quantum circuits, estimates cost function
 gradient magnitudes.
"""

import numpy as np

def set_simulation_constants():
    """
    Generates constants and labels used in simulation.
    """
    NUM_TRIALS = 10
    ERROR_RATES = ["0%", "3%", "5%", "10%", "15%"]
    MAX_FOLDING = 4

    # For each error rate, we want to include a label for the "synthetic" noise 
    #  levels generated by adding more noise (i.e., via unitary folding). We do 
    #  this even for an error rate of 0%; in general, we would not perform ZNE
    #  on an already noise-free result, but we include it as a sanity check.
    NOISE_LEVELS = ERROR_RATES[:]
    for error_rate in ERROR_RATES:
        folded_noise_levels = [error_rate + " fold x" + str(folding_factor)
                               for folding_factor in range(MAX_FOLDING + 1)
                               if folding_factor > 1]
        NOISE_LEVELS.extend(folded_noise_levels)

    NUM_QUBITS = range(4, 10)

    return NUM_TRIALS, ERROR_RATES, MAX_FOLDING, NOISE_LEVELS, NUM_QUBITS

constants = set_simulation_constants()
NUM_TRIALS, ERROR_RATES, MAX_FOLDING, NOISE_LEVELS, NUM_QUBITS = constants

data = np.zeros(shape=(NUM_TRIALS, len(NOISE_LEVELS)))

if __name__ == "__main__":
    pass
